#include <iostream>
#include <sstream>
#include <iomanip>
#include <string>
#include <random>
#include <algorithm>
#include <functional>
#include <iterator>
#include <numeric>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <cctype>
#include <ctime>
#include <cstdlib>
#include <cmath>
#include <Windows.h>
#include <thread>
#include <mutex>

////////////////////////////////////////////////////////////////////////////////////////////
// Getting T-array size
template<typename T, int size>
int getSize(T(&)[size]) { return size; }
////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////////////////////////////////////////////////////////////
// iterator for basic types
std::begin(v);
// iterator for stl-containers
v.begin();
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// Initialization vector from console
std::string str;
std::getline(std::cin, str);

std::istringstream ss(str);
std::vector<DWORD> process
{
    std::istream_iterator<DWORD>(ss),
    std::istream_iterator<DWORD>()
};

std::vector<int> v; //v{7, 7, 7} || v(3, 7) || v(3)



// Random Value Generator
std::random_device rd;
std::default_random_engine dre(rd());
std::uniform_int_distribution<int> distr(0, 9);
//std::uniform_real_distribution<double> distr(0.1, 9.9);
std::generate(v.begin(), v.end(), std::bind(distr, dre));
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// std::cin || std::ifstream
std::copy(std::istream_iterator<int>(std::cin), std::istream_iterator<int>(), std::inserter(v, v.begin()));

// std::cout || std::ofstream
std::copy(v.begin(), v.end(), std::ostream_iterator<int>(std::cout, ", "));
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// SUM:    7+7+7 = 21
int sum = std::accumulate(v.begin(), v.end(), 0);
int sum_evens = std::accumulate
(
    v.begin(),
    v.end(),
    0,
    [](const int storage, const int value)
    {
        if(value % 2 == 0)
            return storage + value;

        return storage;
    }
);
std::cout << "The sum of even values is " << sum_evens << std::endl;

// MULT:   7*7*7 = 343
int mult = std::accumulate(v.begin(), v.end(), 1, std::multiplies<int>());
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// CONCAT: "7 - 7 - 7"
// join(separator=" - ", v)
std::string dashed = std::accumulate
(
    std::next(v.begin()),
    v.end(),
    std::to_string((long long) *v.begin()),
    [](std::string storage, int value)
    {
        return storage + " - " + std::to_string((long long)value);
    }
);
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// find first odd value
std::vector<int>::const_iterator it = std::find_if
(
    v.begin(),
    v.end(),
    [](const int &item)
    {
        return item % 2 == 1;
    }
);
if (it == v.end())
    std::cout << "Odd values not found";
else
    std::cout << "The first odd value is " << *it << std::endl;
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
// sort struct by %Field%
struct Man
{
    std::string first_name;
    std::string favorite_lang;
    size_t age;
};

int main()
{
    std::vector<Man> mans
    {
        { "Misha", "Pascal", 32 },
        { "Nikita", "ASM", 45 },
        { "Vova", "Delphi", 19 },
        { "Dima", "PHP", 15 },
        { "Lexa", "Python", 17 },
        { "Sasha", "Plus", 21 },
        { "Andrey", "Sharp", 18 }
    };

    std::sort(mans.begin(), mans.end(), [](const Man& a, const Man& b) {
        return a.favorite_lang < b.favorite_lang;
    });

    for (const auto &man : mans)
        std::cout << man.first_name << " \t",
        std::cout << man.favorite_lang << " \t",
        std::cout << man.age << std::endl;

    return 0;
}
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////
